

adder = @+@ {
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	};
	
adderNonExclusive = @+@ {
	[<2><2><2><2><2><-2>]
	[<2><2><2><2><2><-1>]
	[<2><2><2><2><2>< 0>]
	[<2><2><2><2><2>< 1>]
	[<2><2><2><2><2>< 2>]
	[<-2><-1><0><1><2><FF>]
	};
	
substact = @-@ {
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	}; 
	
copy = {
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	};
copySecondBeckup = {
	[<-2,-2><-2,-2><-2,-2><-2,-2><-2,-2>]
	[<-1,-1><-1,-1><-1,-1><-1,-1><-1,-1>]
	[< 0, 0>< 0, 0>< 0, 0>< 0, 0>< 0, 0>]
	[< 1, 1>< 1, 1>< 1, 1>< 1, 1>< 1, 1>]
	[< 2, 2>< 2, 2>< 2, 2>< 2, 2>< 2, 2>]
	};

multipiler = @*@ {
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	};
	
constantTable = {
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF><-2,-2>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF><-1,-1>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>< 0, 0>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>< 1, 1>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>< 2, 2>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>]
	};
	
minFinderCopyer = {
	[<-2,-2><-2,-1><-2, 0><-2, 1><-2, 2><ff,ff>]
	[<-2,-2><-1,-1><-1, 0><-1, 1><-1, 2><ff,ff>]
	[<-2,-2><-1,-1>< 0, 0>< 0, 1>< 0, 2><ff,ff>]
	[<-2,-2><-1,-1>< 0, 0>< 1, 1>< 1, 2><ff,ff>]
	[<-2,-2><-1,-1>< 0, 0>< 1, 1>< 2, 2><ff,ff>]
	[<ff,-2><ff,-1><ff, 0><ff, 1><ff, 2><ff,ff>]
	};
copySecond = {
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	};
	
copyFirst = {
	[<-2,-2><-2,-2><-2,-2><-2,-2><-2,-2>]
	[<-1,-1><-1,-1><-1,-1><-1,-1><-1,-1>]
	[< 0, 0>< 0, 0>< 0, 0>< 0, 0>< 0, 0>]
	[< 1, 1>< 1, 1>< 1, 1>< 1, 1>< 1, 1>]
	[< 2, 2>< 2, 2>< 2, 2>< 2, 2>< 2, 2>]
	};
	
sub QuterInter {

	sub Lane {
		P0(50.0)->t0->P0;
		iP3(0.0)->t0[copyFirst]->P4->oT3; //iP3 is for demand 
		iP1(50)->t1->P0->t1[adder]; // iP1 is for u_i  (number of machines enetered)
		P0->t2[substact];
		iP2(50)->t2->P0; //iP2 is for e_i (number of machines leava) 
		p0 <= <0.0>;
	}	

	sub Splitter {
		P9(1.0)->t7[constantTable]->P10(1.0)->t3[substact];
		P10->t7->P9;      

		iP0(1.0)->t0->p2->t2[multipiler];    //iP0 for split
				  t0->p3->t3->p7(1.0)->t4[multipiler];  // 
				 
		iP1(50)->t1->p4->t2->p6->oT5;   //iP1 for lane length 
				 t1->p5->t4->p8->oT6;
				 
		P9<= <1.0>;
	}

	sub VehicleCalcExtended {
		P0->t0->P1->t1->P2->t2[1]->P1;
		iP4(0.0)->t0; //iP4 for green;
		P2->t3->P0;
		iP5(0.0)->t3; //iP5 for yellow
		t1->P6->t7[copySecond]->P7(50)->t8;
		P8(50)->t7->P8;

		P8 <= <20>;
		P0 <= <0>;

		t8->p9->oT9; //demand to read lane info
		t8->p10->t10;
		iP11(50)->t10[minFinderCopyer]; //iP11 for the actual value of lane
		t10->p12->oT13;// oT13 for the actual value 
		t10->p13->oT14; // oT14 for actual value of lane
	}

	iLaneOne = new Lane;
	splitOne = new Splitter;
	calcOne = new VehicleCalcExtended;

	iP0(0)  -> t0 -> calcOne.iP4(0.0); // iP0 for green one
	iP1(0)  -> t1 -> calcOne.iP5(0.0); // iP1 for yellow
	iP2(50) -> t2 -> iLaneOne.iP1(50.0); // iP2 is for input machines on lane one
	iP3(1)  -> t3 -> splitOne.iP0(1.0); // iP3 for split for lane 1 

	calcOne.oT9 -> iLaneOne.iP3(50.0);
	iLaneOne.oT3 -> calcOne.iP11(50.0);
	calcOne.oT13 -> P4 -> t4 -> iLaneOne.iP2(50.0);
						  t4 -> splitOne.iP1(50.0);
	 
	splitOne.oT5 -> p6->oT1;
	splitOne.oT6 -> p7->oT2;
	calcOne.oT14 -> p8 ->oT3; //Line length
}

qOne = new QuterInter;
qTwo = new QuterInter;
qThree = new QuterInter;
qFour = new QuterInter;

iP0(0.0) -> t0 -> qOne.iP0(0); // iP0 for green one
            t0 -> qThree.iP0(0); 
iP1(0.0) -> t1 -> qOne.iP1(0) ; // iP1 for yellow one
            t1 -> qThree.iP1(0);
            
iP2(0.0) -> t2 -> qTwo.iP0(0); // iP2 for green two
            t2 -> qFour.iP0(0); 
iP3(0.0) -> t3 -> qTwo.iP1(0) ; // iP3 for yellow three
            t3 -> qFour.iP1(0);
            
iP4(1.0) -> t4 -> qOne.iP3(1) ; // split one
iP5(1.0) -> t5 -> qTwo.iP3(1) ; // split two
iP6(1.0) -> t6 -> qThree.iP3(1) ; // split three
iP7(1.0) -> t7 -> qFour.iP3(1) ; // split four

iP8(50.0) -> t8 -> qOne.iP2(50); // inp machines for lane 1
iP9(50.0) -> t9 -> qTwo.iP2(50); // inp machines for lane 2
iP10(50.0) -> t10 -> qThree.iP2(50); // inp machines for lane 3
iP11(50.0) -> t11 -> qFour.iP2(50); // inp machines for lane 4


qOne.oT3 -> p40 -> oT5; //machines in input lane 1
qTwo.oT3 -> p41 -> oT6; //machines in input lane 2
qThree.oT3 -> p42 -> oT7; //machines in input lane 3
qFour.oT3 -> p43 -> oT8; // machines in input lane 4

sub OuptutQuarter{
	sub Lane {
		P0(50.0)->t0->P0;
		iP3(0.0)->t0[copySecond]->P4->oT3; //iP3 is for demand 
		iP1(50)->t1->P0->t1[adder]; // iP1 is for u_i  (number of machines enetered)
		P0->t2[substact];
		iP2(50)->t2->P0; //iP2 is for e_i (number of machines leava) 
		p0 <= <10.0>;
	}	
	
	lane = new Lane;
	
	iP0(50.0) -> t10 -> lane.iP2(50) ;//iP0 is for exiting cars
                 t10 -> lane.iP3(0) ; // for request as well
	iP1(50.0) -> t1 -> lane.iP1(50) ; // iP1 is for entering cars
	
	P0(50.0) -> t2 -> P0;
	            t2 -> P1;
	P1 -> t3[substact]-> P2(50.0) -> oT0;
	lane.oT3 -> p3 -> t3;
	P0(50) <= <20.0>;
	                
}

outLaneOne = new OuptutQuarter;
outLaneTwo = new OuptutQuarter;
outLaneThree = new OuptutQuarter;
outLaneFour = new OuptutQuarter;


qOne.oT1  -> p20 -> t20[adderNonExclusive] -> outLaneThree.iP1(50.0);
qTwo.oT2  -> p21 -> t20;

qTwo.oT1 -> p22 -> t21[adderNonExclusive] -> outLaneFour.iP1(50.0);
qThree.oT2-> p23 -> t21;

qThree.oT1 -> p24 -> t22[adderNonExclusive] -> outLaneOne.iP1(50.0);
qFour.oT2  -> p25 -> t22;


qFour.oT1 -> p26 -> t23[adderNonExclusive] ->  outLaneTwo.iP1(50.0);;
qOne.oT2  -> p27 -> t23;

iP12(50) -> t200 -> outLaneOne.iP0(50); //iP12 is for outgoing machines in lane one
iP13(50) -> t201 -> outLaneTwo.iP0(50); //iP13 is for outgoing machines in lane one
iP14(50) -> t202 -> outLaneThree.iP0(50); //iP14 is for outgoing machines in lane one
iP15(50) -> t203 -> outLaneFour.iP0(50); //iP15 is for outgoing machines in lane one

outLaneOne.oT0 -> P50 -> oT10; // current machines in out lane 1
outLaneTwo.oT0 -> P51 -> oT11; // current machines in out lane 2
outLaneThree.oT0 -> P52 -> oT12; // current machines in out lane 3
outLaneFour.oT0 -> P53 -> oT13; // current machines in out lane 4

