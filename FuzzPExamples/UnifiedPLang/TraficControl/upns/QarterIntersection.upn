adder = @+@ {
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	};
	
substact = @-@ {
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	}; 
	
copy = {
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	};
copySecond = {
	[<-2,-2><-2,-2><-2,-2><-2,-2><-2,-2>]
	[<-1,-1><-1,-1><-1,-1><-1,-1><-1,-1>]
	[< 0, 0>< 0, 0>< 0, 0>< 0, 0>< 0, 0>]
	[< 1, 1>< 1, 1>< 1, 1>< 1, 1>< 1, 1>]
	[< 2, 2>< 2, 2>< 2, 2>< 2, 2>< 2, 2>]
	};

multipiler = @*@ {
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	};
	
constantTable = {
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF><-2,-2>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF><-1,-1>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>< 0, 0>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>< 1, 1>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>< 2, 2>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>]
	};
	
minFinder = {
	[<-2><-2><-2><-2><-2>]
	[<-2><-1><-1><-1><-1>]
	[<-2><-1>< 0>< 0>< 0>]
	[<-2><-1>< 0>< 1>< 1>]
	[<-2><-1>< 0>< 1>< 2>]
	};
	
sub Lane {
	P0(30.0)->t0->P0;
	iP3(0.0)->t0[copySecond]->P4->oT3; //iP3 is for demand 
	iP1(50)->t1->P0->t1[adder]; // iP1 is for u_i  (number of machines enetered)
	P0->t2[substact];
	iP2(50)->t2->P0; //iP2 is for e_i (number of machines leava) 
	p0 <= <0.0>;
}	


sub Splitter {
	P9(1.0)->t7[constantTable]->P10(1.0)->t3[substact];
	P10->t7->P9;      

	iP0(1.0)->t0->p2->t2[multipiler];    //iP0 for split
			  t0->p3->t3->p7(1.0)->t4[multipiler];  // 
			 
	iP1(50)->t1->p4->t2->p6->oT5;   //iP1 for lane length 
			 t1->p5->t4->p8->oT6;
			 
	P9<= <1.0>;
}

sub VehicleCalc {
	P0->t0->P1->t1->P2->t2[1]->P1;
	iP4(0.0)->t0; //iP4 for green;
	P2->t3->P0;
	iP5(0.0)->t3; //iP5 for yellow
	t1->P6->t7[copy]->P7(50)->t8;
	P8(50)->t7->P8;

	P8 <= <20>;
	P0 <= <0>;

	t8->p9->oT9; //demand to read lane info
	t8->p10->t10;
	iP11(50)->t10[minFinder]; //iP11 for the actual value of lane
	t10->p12->oT13;// oT13 for the actual value 
}

iLaneOne = new Lane;
splitOne = new Splitter;
calcOne = new VehicleCalc;

iP0(0)  -> t0 -> calcOne.iP4(0.0); // iP0 for green one
iP1(0)  -> t1 -> calcOne.iP5(0.0); // iP1 for yellow
iP2(50) -> t2 -> iLaneOne.iP1(50.0); // iP2 is for input machines on lane one
iP3(1)  -> t3 -> splitOne.iP0(1.0); // iP3 for split for lane 1 

calcOne.oT9 -> iLaneOne.iP3(50.0);
iLaneOne.oT3 -> calcOne.iP11(50.0);
calcOne.oT13 -> P4 -> t4 -> iLaneOne.iP2(50.0);
                      t4 -> splitOne.iP1(50.0);
 
splitOne.oT5 -> p6->oT1;
splitOne.oT6 -> p7->oT2;








