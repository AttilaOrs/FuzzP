
adder = @+@ {
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	};
	
adderNonExclusive = @+@ {
	[<2><2><2><2><2><-2>]
	[<2><2><2><2><2><-1>]
	[<2><2><2><2><2>< 0>]
	[<2><2><2><2><2>< 1>]
	[<2><2><2><2><2>< 2>]
	[<-2><-1><0><1><2><FF>]
	};
	
substact = @-@ {
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	}; 
	
copy = {
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	};
copySecondBeckup = {
	[<-2,-2><-2,-2><-2,-2><-2,-2><-2,-2>]
	[<-1,-1><-1,-1><-1,-1><-1,-1><-1,-1>]
	[< 0, 0>< 0, 0>< 0, 0>< 0, 0>< 0, 0>]
	[< 1, 1>< 1, 1>< 1, 1>< 1, 1>< 1, 1>]
	[< 2, 2>< 2, 2>< 2, 2>< 2, 2>< 2, 2>]
	};

multipiler = @*@ {
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	[<2><2><2><2><2>]
	};
	
constantTable = {
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF><-2,-2>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF><-1,-1>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>< 0, 0>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>< 1, 1>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>< 2, 2>]
	[<FF,FF><FF,FF><FF,FF><FF,FF><FF,FF><FF,FF>]
	};
	
minFinderCopyer = {
	[<-2,-2><-2,-1><-2, 0><-2, 1><-2, 2><ff,ff>]
	[<-2,-2><-1,-1><-1, 0><-1, 1><-1, 2><ff,ff>]
	[<-2,-2><-1,-1>< 0, 0>< 0, 1>< 0, 2><ff,ff>]
	[<-2,-2><-1,-1>< 0, 0>< 1, 1>< 1, 2><ff,ff>]
	[<-2,-2><-1,-1>< 0, 0>< 1, 1>< 2, 2><ff,ff>]
	[<ff,-2><ff,-1><ff, 0><ff, 1><ff, 2><ff,ff>]
	};
copySecond = {
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	[<-2,-2><-1,-1><0,0><1,1><2,2>]
	};
	
sub OuptutQuarter{
	sub Lane {
		P0(50.0)->t0->P0;
		iP3(0.0)->t0[copySecond]->P4->oT3; //iP3 is for demand 
		iP1(50)->t1->P0->t1[adder]; // iP1 is for u_i  (number of machines enetered)
		P0->t2[substact];
		iP2(50)->t2->P0; //iP2 is for e_i (number of machines leava) 
		p0 <= <10.0>;
	}	
	
	lane = new Lane;
	
	iP0(50.0) -> t10 -> lane.iP2(50) ;//iP0 is for exiting cars
                 t10 -> lane.iP3(0) ; // for request as well
	iP1(50.0) -> t1 -> lane.iP1(50) ; // iP1 is for entering cars
	
	P0(50.0) -> t2 -> P0;
	            t2 -> P1;
	P1 -> t3[substact]-> P2(50.0) -> oT0;
	lane.oT3 -> p3 -> t3;
	P0(50) <= <20.0>;
	                
}

out =new OuptutQuarter;

iP0(50) -> t0 -> out.iP0(50);
iP1(50) -> t1 -> out.iP1(50);
out.oT0 -> p2 -> oT0;   
	
